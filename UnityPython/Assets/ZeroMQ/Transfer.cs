// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: transfer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Transfer {

  /// <summary>Holder for reflection information generated from transfer.proto</summary>
  public static partial class TransferReflection {

    #region Descriptor
    /// <summary>File descriptor for transfer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransferReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg50cmFuc2Zlci5wcm90bxIIdHJhbnNmZXIiiwEKCFRyYW5zZmVyEjcKDnR5",
            "cGVPZkZ1bmN0aW9uGAEgASgOMh8udHJhbnNmZXIuVHJhbnNmZXIuVHlwZUZ1",
            "bmN0aW9uEhAKCGRjbUZpbGVzGAIgAygMIjQKDFR5cGVGdW5jdGlvbhIICgRO",
            "T05FEAASDwoLQkVEX1JFTU9WQUwQARIJCgVNQUdJQxACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Transfer.Transfer), global::Transfer.Transfer.Parser, new[]{ "TypeOfFunction", "DcmFiles" }, null, new[]{ typeof(global::Transfer.Transfer.Types.TypeFunction) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Transfer : pb::IMessage<Transfer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Transfer> _parser = new pb::MessageParser<Transfer>(() => new Transfer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transfer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Transfer.TransferReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transfer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transfer(Transfer other) : this() {
      typeOfFunction_ = other.typeOfFunction_;
      dcmFiles_ = other.dcmFiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transfer Clone() {
      return new Transfer(this);
    }

    /// <summary>Field number for the "typeOfFunction" field.</summary>
    public const int TypeOfFunctionFieldNumber = 1;
    private global::Transfer.Transfer.Types.TypeFunction typeOfFunction_ = global::Transfer.Transfer.Types.TypeFunction.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Transfer.Transfer.Types.TypeFunction TypeOfFunction {
      get { return typeOfFunction_; }
      set {
        typeOfFunction_ = value;
      }
    }

    /// <summary>Field number for the "dcmFiles" field.</summary>
    public const int DcmFilesFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_dcmFiles_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> dcmFiles_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> DcmFiles {
      get { return dcmFiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transfer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transfer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeOfFunction != other.TypeOfFunction) return false;
      if(!dcmFiles_.Equals(other.dcmFiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeOfFunction != global::Transfer.Transfer.Types.TypeFunction.None) hash ^= TypeOfFunction.GetHashCode();
      hash ^= dcmFiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TypeOfFunction != global::Transfer.Transfer.Types.TypeFunction.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TypeOfFunction);
      }
      dcmFiles_.WriteTo(output, _repeated_dcmFiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TypeOfFunction != global::Transfer.Transfer.Types.TypeFunction.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TypeOfFunction);
      }
      dcmFiles_.WriteTo(ref output, _repeated_dcmFiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeOfFunction != global::Transfer.Transfer.Types.TypeFunction.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeOfFunction);
      }
      size += dcmFiles_.CalculateSize(_repeated_dcmFiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transfer other) {
      if (other == null) {
        return;
      }
      if (other.TypeOfFunction != global::Transfer.Transfer.Types.TypeFunction.None) {
        TypeOfFunction = other.TypeOfFunction;
      }
      dcmFiles_.Add(other.dcmFiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeOfFunction = (global::Transfer.Transfer.Types.TypeFunction) input.ReadEnum();
            break;
          }
          case 18: {
            dcmFiles_.AddEntriesFrom(input, _repeated_dcmFiles_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TypeOfFunction = (global::Transfer.Transfer.Types.TypeFunction) input.ReadEnum();
            break;
          }
          case 18: {
            dcmFiles_.AddEntriesFrom(ref input, _repeated_dcmFiles_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Transfer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TypeFunction {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("BED_REMOVAL")] BedRemoval = 1,
        [pbr::OriginalName("MAGIC")] Magic = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
